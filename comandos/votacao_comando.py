import mysql.connector
from twitchio.ext import commands

# Vari√°veis globais de vota√ß√£o
voting_ended = True
voting_name = ""
votacao_id = None

class VotacaoComando(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.conn = None
        self.cursor = None
        self.conectar_db()

    # Conex√£o com o banco de dados
    def conectar_db(self):
        self.conn = mysql.connector.connect(
            host="localhost",  # Substitua pelo seu host
            user="root",       # Substitua pelo seu usu√°rio
            password="",       # Substitua pela sua senha
            database="twitch"  # O nome do banco de dados
        )
        self.cursor = self.conn.cursor()

    # Fun√ß√£o para salvar a vota√ß√£o no banco de dados
    def salvar_votacao(self, nome_votacao):
        global votacao_id
        query = "INSERT INTO votacoes (nome_votacao) VALUES (%s)"
        self.cursor.execute(query, (nome_votacao,))
        self.conn.commit()
        votacao_id = self.cursor.lastrowid  # Pega o ID da vota√ß√£o rec√©m-criada

    # Fun√ß√£o para registrar o voto no banco de dados
    def salvar_voto(self, usuario_nome, nota):
        query = "INSERT INTO votos (votacao_id, usuario_nome, nota) VALUES (%s, %s, %s)"
        self.cursor.execute(query, (votacao_id, usuario_nome, nota))
        self.conn.commit()

    # Fun√ß√£o para calcular a m√©dia das notas de uma vota√ß√£o
    def calcular_media_votacao(self):
        query = "SELECT nota FROM votos WHERE votacao_id = %s"
        self.cursor.execute(query, (votacao_id,))
        notas = self.cursor.fetchall()

        if notas:
            media = sum(nota[0] for nota in notas) / len(notas)
            return media
        return 0

    # Fun√ß√£o para fechar a conex√£o com o banco de dados
    def fechar_conexao(self):
        self.cursor.close()
        self.conn.close()

    # Comando 'start_votos' para iniciar a vota√ß√£o
    @commands.command(name='start_votos')
    async def start_votos(self, ctx, *, nome_votacao: str):
        global voting_ended, voting_name, votacao_id

        if not ctx.author.is_mod:
            await ctx.send("üö´ Voc√™ precisa ser moderador para usar esse comando. üö´")
            return

        if not voting_ended:
            await ctx.send("‚ùå A vota√ß√£o atual ainda n√£o foi encerrada. ‚ùå")
            return

        voting_name = nome_votacao
        voting_ended = False  # Define que a vota√ß√£o est√° aberta
        self.salvar_votacao(voting_name)  # Salva a vota√ß√£o no banco de dados
        await ctx.send(f"üéâ A vota√ß√£o **{voting_name}** come√ßou! Use !fr nota para votar. üéâ")

    # Comando 'nota' para registrar a nota
    @commands.command(name='nota')
    async def nota(self, ctx, voto: str):
        global voting_ended, voting_name

        if voting_ended:
            await ctx.send(f"‚ùå A vota√ß√£o **{voting_name}** j√° foi encerrada. N√£o √© poss√≠vel votar. ‚ùå")
            return

        voto = voto.replace(',', '.')

        try:
            voto_float = float(voto)
            voto_float = round(voto_float, 2)

            if 0 <= voto_float <= 10:
                self.salvar_voto(ctx.author.name, voto_float)  # Salva o voto no banco de dados
                await ctx.send(f"üéâ {ctx.author.name} deu a nota {voto_float} para **{voting_name}** üéâ")
            else:
                await ctx.send(f"üö´ {ctx.author.name}, sua nota deve ser entre 0 e 10. üö´")
        except ValueError:
            await ctx.send(f"üö´ {ctx.author.name}, sua nota n√£o √© v√°lida. Use um n√∫mero entre 0 e 10 (exemplo: 8.8). üö´")

    # Comando para encerrar a vota√ß√£o
    @commands.command(name='encerrar_votacao')
    async def encerrar_votacao(self, ctx):
        global voting_ended, voting_name

        if not ctx.author.is_mod:
            await ctx.send("üö´ Voc√™ precisa ser moderador para usar esse comando. üö´")
            return

        if voting_ended:
            await ctx.send(f"‚ùå A vota√ß√£o **{voting_name}** j√° foi encerrada. ‚ùå")
            return

        media_votos = self.calcular_media_votacao()  # Calcula a m√©dia no banco de dados
        if media_votos:
            await ctx.send(f"üéâ A vota√ß√£o **{voting_name}** foi encerrada. A m√©dia das notas √©: {media_votos:.2f} üéâ")
        else:
            await ctx.send(f"‚ùå Nenhum voto registrado para a vota√ß√£o **{voting_name}**. ‚ùå")

        voting_ended = True  # Define que a vota√ß√£o foi encerrada

    @commands.command(name='melhor_nota')
    async def melhor_nota(self, ctx):
        if not ctx.author.is_mod:
            await ctx.send("üö´ Voc√™ precisa ser moderador para usar esse comando. üö´")
            return

        # Buscar as vota√ß√µes que j√° ocorreram
        self.cursor.execute("SELECT * FROM votacoes")
        votacoes = self.cursor.fetchall()

        if not votacoes:
            await ctx.send("‚ùå N√£o h√° vota√ß√µes registradas no momento. ‚ùå")
            return

        # Vari√°vel para armazenar as mensagens do ranking
        mensagens_ranking = []

        # Iterar pelas vota√ß√µes e exibir resultados
        for votacao in votacoes:
            id_votacao = votacao[0]  # ID da vota√ß√£o
            nome_votacao = votacao[1]  # Nome da vota√ß√£o

            # Obter os votos dessa vota√ß√£o
            self.cursor.execute("SELECT usuario_nome, nota FROM votos WHERE votacao_id = %s", (id_votacao,))
            votos = self.cursor.fetchall()

            if votos:
                # Calcular a m√©dia dos votos
                media_votacao = sum(voto[1] for voto in votos) / len(votos)

                # Ordenar os votos e selecionar os 3 primeiros
                ordenados = sorted(votos, key=lambda x: x[1], reverse=True)  # Ordena pela nota (√≠ndice 1)
                top_3 = ordenados[:3]

                # Formatar a mensagem para adicionar √† lista de rankings
                ranking = "üìä Top 3 desenhos com maior pontua√ß√£o: \r\n"
                for i, (nome, nota) in enumerate(top_3):
                    ranking += f"{i + 1}¬∫ lugar: **{nome}** com nota de {nota:.2f}\n"

                # Adicionar a mensagem √† lista
                mensagens_ranking.append(ranking)
            else:
                mensagens_ranking.append(f"‚ùå N√£o h√° votos registrados para a vota√ß√£o **{nome_votacao}**. ‚ùå")

        # Enviar todas as mensagens do ranking de uma vez (em um √∫nico envio)
        if mensagens_ranking:
            await ctx.send("\n\n".join(mensagens_ranking))

    # Fun√ß√£o para adicionar o Cog no bot
def setup(bot):
    bot.add_cog(VotacaoComando(bot))
